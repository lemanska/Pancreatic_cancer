labs(title = "Incident pancreatic cancer: rates per 100,000 patients")+
xlab("Time")+
ylab("Pan Ca cases(rate)")+
labs(colour = "Station")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(
plot= paca_time_rates, dpi=800,width = 20,height = 10, units = "cm",
filename="paca_time_rates.png", path=here::here("output"),
)
###
Denominator <- read_csv(here::here("output", "measures", "measure_registered_rate.csv"))
X <- read_csv(here::here("output", "input.csv"))
X$pa_ca_date <- as.Date(X$pa_ca_date,format = "%Y-%m-%d")
X <- X[which(X$pa_ca_date>="2015-01-01"),]
X$Month <- as.Date(cut(X$pa_ca_date, breaks = "month"))
###
#generating counts using the summary table
###
paca_counts <- as.data.frame(table(X$Month))#create the table of pa_ca counts by month
colnames(paca_counts) <- c("date", "Panc_Ca_count")
#apply small number suppression
paca_counts <- paca_counts %>% mutate_at(vars(Panc_Ca_count),redactor)
paca_counts$date <- as.Date(as.character(paca_counts$date,format = "%Y-%m-%d"))
paca_counts$Month <- as.Date(cut(paca_counts$date, breaks = "month"))
paca_counts$Year <- as.Date(cut(paca_counts$date, breaks = "year"))
#calculate rates of pancreatic cancer per 100,000 registered patients
paca_rates <- merge(paca_counts, Denominator[,c("registered", "date")], by = "date")
paca_rates$rate <- paca_rates$Panc_Ca_count / paca_rates$registered * 100000
paca_time_rates <- ggplot(data = paca_rates,
aes(Month, rate, color = Year)) +
geom_line(color = paca_rates$Year )+
geom_point(color = paca_rates$Year )+
scale_x_date(date_breaks = "2 month",
date_labels = "%Y-%m")+
labs(title = "Incident pancreatic cancer: rates per 100,000 patients")+
xlab("Time")+
ylab("Pan Ca cases(rate)")+
labs(colour = "Station")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(
plot= paca_time_rates, dpi=800,width = 20,height = 10, units = "cm",
filename="paca_time_rates.png", path=here::here("output"),
)
paca_time_rates <- ggplot(data = paca_rates,
aes(Month, rate, color = Year)) +
geom_line(color = paca_rates$Year )+
geom_point(color = paca_rates$Year )+
scale_x_date(date_breaks = "2 month",
date_labels = "%Y-%m")+
labs(title = "Incident pancreatic cancer: rates per 100,000 patients",
x = "Time")+
ylab("Pan Ca cases(rate)")+
labs(colour = "Station")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(
plot= paca_time_rates, dpi=800,width = 20,height = 10, units = "cm",
filename="paca_time_rates.png", path=here::here("output"),
)
paca_time_rates <- ggplot(data = paca_rates,
aes(Month, rate, color = Year)) +
geom_line(color = paca_rates$Year )+
geom_point(color = paca_rates$Year )+
scale_x_date(date_breaks = "2 month",
date_labels = "%Y-%m")+
labs(title = "Incident pancreatic cancer: rates per 100,000 patients",
x = "Time", y = "Pancreatic cancer rates")+
labs(colour = "Station")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(
plot= paca_time_rates, dpi=800,width = 20,height = 10, units = "cm",
filename="paca_time_rates.png", path=here::here("output"),
)
library('tidyverse')
## Redactor code (W.Hulme)
redactor <- function(n, threshold=6,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
###
#download and process the main datafile
###
X <- read_csv(here::here("output", "input.csv"))
X$pa_ca_date <- as.Date(X$pa_ca_date,format = "%Y-%m-%d")
X <- X[which(X$pa_ca_date>="2015-01-01"),]
X$Month <- as.Date(cut(X$pa_ca_date, breaks = "month"))
###
#plot 1, summary counts of pa_ca
###
paca_time210222 <- ggplot(data = X,
aes(Month, pa_ca)) +
stat_summary(fun.y = sum, geom = "line")
ggsave(
plot= paca_time210222, dpi=800,width = 20,height = 10, units = "cm",
filename="paca_time210222.png", path=here::here("output"),
)
###
#generating counts using the summary table
###
paca_counts <- as.data.frame(table(X$Month))#create the table of pa_ca counts by month
colnames(paca_counts) <- c("date", "Panc_Ca_count")
#apply small number suppresion
paca_counts <- paca_counts %>% mutate_at(vars(Panc_Ca_count),redactor)
paca_counts$date <- as.Date(as.character(paca_counts$date,format = "%Y-%m-%d"))
paca_counts$Month <- as.Date(cut(paca_counts$date, breaks = "month"))
paca_counts$Year <- as.Date(cut(paca_counts$date, breaks = "year"))
paca_time_table <- ggplot(data = paca_counts,
aes(Month, Panc_Ca_count, color = Year)) +
geom_line(color = paca_counts$Year )+
geom_point(color = paca_counts$Year )+
scale_x_date(date_breaks = "2 month",
date_labels = "%Y-%m")+
labs(title = "Incident pancreatic cancer: cases",
x = "Time", y = "Pancreatic cancer count")+
labs(colour = "Station")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(
plot= paca_time_table, dpi=800,width = 20,height = 10, units = "cm",
filename="paca_time_table.png", path=here::here("output"),
)
###
#plot by year
###
paca_counts <- as.data.frame(table(X$Month))
colnames(paca_counts) <- c("date", "Panc_Ca_count")
#apply small number suppression
paca_counts <- paca_counts %>% mutate_at(vars(Panc_Ca_count),redactor)
paca_counts$date <- as.character(paca_counts$date)
paca_counts$Month <- as.numeric(substr(paca_counts$date, 6, 7))
paca_counts$Year <- substr(paca_counts$date, 1, 4)
paca_time_table_year <- ggplot(data = paca_counts,
aes(Month, Panc_Ca_count, color = Year)) +
geom_line()+
geom_point()+
scale_x_continuous(name = "Time", breaks = c(1:12),
label = format(ISOdatetime(2000,1:12,1,0,0,0),"%b"))+
labs(title = "Incident pancreatic cancer: cases",
colour = "Year", y = "Pancreatic cancer count")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(
plot= paca_time_table_year, dpi=800,width = 20,height = 10, units = "cm",
filename="paca_time_table_year.png", path=here::here("output"),
)
View(paca_time_rates)
library('tidyverse')
## Redactor code (W.Hulme)
redactor <- function(n, threshold=6,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
Denominator <- read_csv(here::here("output", "measures", "measure_registered_rate.csv"))
X <- read_csv(here::here("output", "input.csv"))
X$pa_ca_date <- as.Date(X$pa_ca_date,format = "%Y-%m-%d")
X <- X[which(X$pa_ca_date>="2015-01-01"),]
X$Month <- as.Date(cut(X$pa_ca_date, breaks = "month"))
###
#generating counts using the summary table
###
paca_counts <- as.data.frame(table(X$Month))#create the table of pa_ca counts by month
colnames(paca_counts) <- c("date", "Panc_Ca_count")
#apply small number suppression
paca_counts <- paca_counts %>% mutate_at(vars(Panc_Ca_count),redactor)
paca_counts$date <- as.Date(as.character(paca_counts$date,format = "%Y-%m-%d"))
paca_counts$Month <- as.Date(cut(paca_counts$date, breaks = "month"))
paca_counts$Year <- as.Date(cut(paca_counts$date, breaks = "year"))
#calculate rates of pancreatic cancer per 100,000 registered patients
paca_rates <- merge(paca_counts, Denominator[,c("registered", "date")], by = "date")
paca_rates$rate <- paca_rates$Panc_Ca_count / paca_rates$registered * 100000
paca_time_rates <- ggplot(data = paca_rates,
aes(Month, rate, color = Year)) +
geom_line(color = paca_rates$Year )+
geom_point(color = paca_rates$Year )+
scale_x_date(date_breaks = "2 month",
date_labels = "%Y-%m")+
labs(title = "Incident pancreatic cancer: rates per 100,000 patients",
x = "Time", y = "Pancreatic cancer rates")+
labs(colour = "Station")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(
plot= paca_time_rates, dpi=800,width = 20,height = 10, units = "cm",
filename="paca_time_rates.png", path=here::here("output"),
)
###
#save the output table
###
paca_rates$date <- as.character(paca_rates$date)
paca_rates$Month <- as.numeric(substr(paca_rates$date, 6, 7))
ms <- format(ISOdatetime(2000,1:12,1,0,0,0),"%b")
paca_rates$Month <- ms[paca_rates$Month]
paca_rates$Year <- substr(paca_rates$date, 1, 4)
write.table(paca_rates, here::here("output", "paca_rates.csv"),
col.names= c("date","count", "month", "year", "registered", "rate"),
sep = ",",row.names = F)
View(paca_rates)
View(paca_time_rates)
library('tidyverse')
## Redactor code (W.Hulme)
redactor <- function(n, threshold=6,e_overwrite=NA_integer_){
# given a vector of frequencies, this returns a boolean vector that is TRUE if
# a) the frequency is <= the redaction threshold and
# b) if the sum of redacted frequencies in a) is still <= the threshold, then the
# next largest frequency is also redacted
n <- as.integer(n)
leq_threshold <- dplyr::between(n, 1, threshold)
n_sum <- sum(n)
# redact if n is less than or equal to redaction threshold
redact <- leq_threshold
# also redact next smallest n if sum of redacted n is still less than or equal to threshold
if((sum(n*leq_threshold) <= threshold) & any(leq_threshold)){
redact[which.min(dplyr::if_else(leq_threshold, n_sum+1L, n))] = TRUE
}
n_redacted <- if_else(redact, e_overwrite, n)
}
###
#download and prep the data
###
Denominator <- read_csv(here::here("output", "measures", "measure_registered_rate.csv"))
X <- read_csv(here::here("output", "input.csv"))
X$pa_ca_date <- as.Date(X$pa_ca_date,format = "%Y-%m-%d")
X <- X[which(X$pa_ca_date>="2015-01-01"),]
X$Month <- as.Date(cut(X$pa_ca_date, breaks = "month"))
###
#generating counts using the summary table
###
paca_counts <- as.data.frame(table(X$Month))#create the table of pa_ca counts by month
colnames(paca_counts) <- c("date", "Panc_Ca_count")
#apply small number suppression
paca_counts <- paca_counts %>% mutate_at(vars(Panc_Ca_count),redactor)
paca_counts$date <- as.Date(as.character(paca_counts$date,format = "%Y-%m-%d"))
paca_counts$Month <- as.Date(cut(paca_counts$date, breaks = "month"))
paca_counts$Year <- as.Date(cut(paca_counts$date, breaks = "year"))
#calculate rates of pancreatic cancer per 100,000 registered patients
paca_rates <- merge(paca_counts, Denominator[,c("registered", "date")], by = "date")
paca_rates$rate <- paca_rates$Panc_Ca_count / paca_rates$registered * 100000
paca_time_rates <- ggplot(data = paca_rates,
aes(Month, rate, color = Year)) +
geom_line(color = paca_rates$Year )+
geom_point(color = paca_rates$Year )+
scale_x_date(date_breaks = "2 month",
date_labels = "%Y-%m")+
labs(title = "Incident pancreatic cancer: rates per 100,000 patients",
x = "Time", y = "Pancreatic cancer rates")+
labs(colour = "Station")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(
plot= paca_time_rates, dpi=800,width = 20,height = 10, units = "cm",
filename="paca_time_rates.png", path=here::here("output"),
)
###
#plot rates by year
###
paca_rates$date <- as.character(paca_rates$date)
paca_rates$Month <- as.numeric(substr(paca_rates$date, 6, 7))
paca_rates$Year <- substr(paca_rates$date, 1, 4)
Denominator <- read_csv(here::here("output", "measures", "measure_registered_rate.csv"))
X <- read_csv(here::here("output", "input.csv"))
X$pa_ca_date <- as.Date(X$pa_ca_date,format = "%Y-%m-%d")
X <- X[which(X$pa_ca_date>="2015-01-01"),]
X$Month <- as.Date(cut(X$pa_ca_date, breaks = "month"))
###
#generating counts using the summary table
###
paca_counts <- as.data.frame(table(X$Month))#create the table of pa_ca counts by month
colnames(paca_counts) <- c("date", "Panc_Ca_count")
#apply small number suppression
paca_counts <- paca_counts %>% mutate_at(vars(Panc_Ca_count),redactor)
paca_counts$date <- as.Date(as.character(paca_counts$date,format = "%Y-%m-%d"))
paca_counts$Month <- as.Date(cut(paca_counts$date, breaks = "month"))
paca_counts$Year <- as.Date(cut(paca_counts$date, breaks = "year"))
#calculate rates of pancreatic cancer per 100,000 registered patients
paca_rates <- merge(paca_counts, Denominator[,c("registered", "date")], by = "date")
paca_rates$rate <- paca_rates$Panc_Ca_count / paca_rates$registered * 100000
#plot longitudinal
paca_time_rates <- ggplot(data = paca_rates,
aes(Month, rate, color = Year)) +
geom_line(color = paca_rates$Year )+
geom_point(color = paca_rates$Year )+
scale_x_date(date_breaks = "2 month",
date_labels = "%Y-%m")+
labs(title = "Incident pancreatic cancer: rates per 100,000 patients",
x = "Time", y = "Pancreatic cancer rates")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(
plot= paca_time_rates, dpi=800,width = 20,height = 10, units = "cm",
filename="paca_time_rates.png", path=here::here("output"),
)
###
#plot rates by year
###
paca_rates$date <- as.character(paca_rates$date)
paca_rates$Month <- as.numeric(substr(paca_rates$date, 6, 7))
paca_rates$Year <- substr(paca_rates$date, 1, 4)
paca_time_rates_year <- ggplot(data = paca_rates,
aes(Month, Panc_Ca_count, color = Year)) +
geom_line()+
geom_point()+
scale_x_continuous(name = "Time", breaks = c(1:12),
label = format(ISOdatetime(2000,1:12,1,0,0,0),"%b"))+
labs(title = "Incident pancreatic cancer: rates per 100,000 patients",
colour = "Year", x = "Time", y = "Pancreatic cancer rates")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(
plot= paca_time_rates_year, dpi=800,width = 20,height = 10, units = "cm",
filename="paca_time_rates_year.png", path=here::here("output"),
)
###
#save the output table
###
ms <- format(ISOdatetime(2000,1:12,1,0,0,0),"%b")
paca_rates$Month <- ms[paca_rates$Month]
write.table(paca_rates, here::here("output", "paca_rates.csv"),
col.names= c("date","count", "month", "year", "registered", "rate"),
sep = ",",row.names = F)
df <- mtcars
## library
library(tidyverse)
write_csv(df, "input.csv")
df5 <- read_feather("C:/Users/al0025/Documents/GitHub/Pancreatic_cancer/output/measures/
input_enzyme_replace_2016-01-01.feather")
library(arrow)
df5 <- read_feather("C:/Users/al0025/Documents/GitHub/Pancreatic_cancer/output/measures/
input_enzyme_replace_2016-01-01.feather")
df5 <- read_feather("C:/Users/al0025/Documents/GitHub/Pancreatic_cancer/output/measures/
input_enzyme_replace_2016-01-01.feather")
df5 <- read_feather("C:/Users/al0025/Documents/GitHub/Pancreatic_cancer/output/measures/input_enzyme_replace_2016-01-01.feather")
View(df5)
df5 <- read_feather("C:/Users/al0025/Documents/GitHub/Pancreatic_cancer/output/measures/input_enzyme_replace_2016-01-01.feather")
View(df5)
Rates <- read_csv(here::here("output", "measures", "measure_enzymeRx_rate.csv"))
## library
library(tidyverse)
library(here)
Rates <- read_csv(here::here("output", "measures", "measure_enzymeRx_rate.csv"))
View(Rates)
X <- read_csv(here::here("output", "measures", "measure_enzymeRx_rate.csv"))
# monthly counts
paca_counts <- as.data.frame(table(X$Month))
Rates <- read_csv(here::here("output", "measures", "measure_enzymeRx_rate.csv"))
class(Rates$date)
colnames(Rates)
# calc rate per 1000
ERx_Rates$rate <- ERx_Rates$enzyme_replace / ERx_Rates$population * 1000
ERx_Rates <- read_csv(here::here("output", "measures", "measure_enzymeRx_rate.csv"))
# calc rate per 1000
ERx_Rates$rate <- ERx_Rates$enzyme_replace / ERx_Rates$population * 1000
View(ERx_Rates)
ERx_Rates <- read_csv(here::here("output", "measures", "measure_enzymeRx_rate.csv"))
# calc rate per 1000
ERx_Rates$rate <- ERx_Rates$enzyme_replace / ERx_Rates$population * 1000
###
# plot monthly rates per 1000
###
ERx_rates <- ggplot(data = ERx_Rates,
aes(date, rate)) +
geom_line()+
geom_point()+
scale_x_date(date_breaks = "2 month",
date_labels = "%Y-%m")+
labs(title = "Patients receiving enzyme replacement: rate per 1000 patients diagnosed",
x = "Time", y = "Enzyme replacement rates")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# save
ggsave(
plot= ERx_rates, dpi=800,width = 20,height = 10, units = "cm",
filename="ERx_rates.png", path=here::here("output"),
)
ERx_Rates <- read_csv(here::here("output", "measures", "measure_enzymeRx_rate.csv"))
# calc rate per 1000
ERx_Rates$rate <- ERx_Rates$enzyme_replace / ERx_Rates$population * 1000
###
# plot monthly rates per 1000
###
ERx_rates <- ggplot(data = ERx_Rates,
aes(date, rate)) +
geom_line()+
geom_point()+
scale_x_date(date_breaks = "2 month",
date_labels = "%Y-%m")+
labs(title = "Patients receiving enzyme replacement: rate per 1000 patients diagnosed",
x = "Time", y = "Enzyme replacement rates")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# save
ggsave(
plot= ERx_rates, dpi=800,width = 20,height = 10, units = "cm",
filename="ERx_rates.png", path=here::here("output"),
)
## library
library(tidyverse)
library(here)
ERx_Rates <- read_csv(here::here("output", "measures", "measure_enzymeRx_rate.csv"))
# calc rate per 1000
ERx_Rates$rate <- ERx_Rates$enzyme_replace / ERx_Rates$population * 1000
###
# plot monthly rates per 1000
###
ERx_rates <- ggplot(data = ERx_Rates,
aes(date, rate)) +
geom_line()+
geom_point()+
scale_x_date(date_breaks = "2 month",
date_labels = "%Y-%m")+
labs(title = "Patients receiving enzyme replacement: rate per 1000 patients diagnosed",
x = "Time", y = "Enzyme replacement rates")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# save
ggsave(
plot= ERx_rates, dpi=800,width = 20,height = 10, units = "cm",
filename="ERx_rates.png", path=here::here("output"),
)
# subproject: NICE Quality statement 4: Pancreatic enzyme replacement therapy
# author: Agz Leman
# 28 Feb 2022
# Plots monthly rates
###
## library
library(tidyverse)
library(here)
###
#download and prep the data
###
ERx_Rates <- read_csv(here::here("output", "measures", "measure_enzymeRx_rate.csv"))
# calc rate per 1000
ERx_Rates$rate <- ERx_Rates$enzyme_replace / ERx_Rates$population * 1000
###
# plot monthly rates per 1000
###
ERx_rates <- ggplot(data = ERx_Rates,
aes(date, rate)) +
geom_line()+
geom_point()+
scale_x_date(date_breaks = "2 month",
date_labels = "%Y-%m")+
labs(title = "Patients receiving enzyme replacement: rate per 1000 patients diagnosed",
x = "Time", y = "Enzyme replacement rates")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# save
ggsave(
plot= ERx_rates, dpi=800,width = 20,height = 10, units = "cm",
filename="ERx_rates.png", path=here::here("output"),
)
colnames(ERx_Rates)
### INFO
# project: Project #27: The effect of COVID-19 on pancreatic cancer diagnosis and care
# subproject: NICE Quality statement 4: Pancreatic enzyme replacement therapy
# author: Agz Leman
# 28 Feb 2022
# Plots monthly rates
###
## library
library(tidyverse)
library(here)
###
#download and prep the data
###
ERx_Rates <- read_csv(here::here("output", "measures", "measure_enzymeRx_rate.csv"))
# calc rate per 1000
ERx_Rates$rate <- ERx_Rates$enzyme_replace / ERx_Rates$population * 1000
###
# plot monthly number of Rxs
###
ERx_number <- ggplot(data = ERx_Rates,
aes(date, enzyme_replace)) +
geom_line()+
geom_point()+
scale_x_date(date_breaks = "2 month",
date_labels = "%Y-%m")+
labs(title = "Patients receiving enzyme replacement",
x = "Time", y = "Number of patients")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# save
ggsave(
plot= ERx_number, dpi=800,width = 20,height = 10, units = "cm",
filename="ERx_number.png", path=here::here("output"),
)
